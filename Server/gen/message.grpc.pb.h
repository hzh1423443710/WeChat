// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: message.proto
#ifndef GRPC_message_2eproto__INCLUDED
#define GRPC_message_2eproto__INCLUDED

#include "message.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace message {

// > Server directory
// protoc --cpp_out=gen -I=. message.proto
// protoc --grpc_out=gen --plugin=protoc-gen-grpc=`which grpc_cpp_plugin` -I. message.proto
//
class EmailVerifyService final {
 public:
  static constexpr char const* service_full_name() {
    return "message.EmailVerifyService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status getEmailVerifyCode(::grpc::ClientContext* context, const ::message::EmailVerifyRequest& request, ::message::EmailVerifyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::EmailVerifyResponse>> AsyncgetEmailVerifyCode(::grpc::ClientContext* context, const ::message::EmailVerifyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::EmailVerifyResponse>>(AsyncgetEmailVerifyCodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::EmailVerifyResponse>> PrepareAsyncgetEmailVerifyCode(::grpc::ClientContext* context, const ::message::EmailVerifyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::EmailVerifyResponse>>(PrepareAsyncgetEmailVerifyCodeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void getEmailVerifyCode(::grpc::ClientContext* context, const ::message::EmailVerifyRequest* request, ::message::EmailVerifyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getEmailVerifyCode(::grpc::ClientContext* context, const ::message::EmailVerifyRequest* request, ::message::EmailVerifyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::EmailVerifyResponse>* AsyncgetEmailVerifyCodeRaw(::grpc::ClientContext* context, const ::message::EmailVerifyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::EmailVerifyResponse>* PrepareAsyncgetEmailVerifyCodeRaw(::grpc::ClientContext* context, const ::message::EmailVerifyRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status getEmailVerifyCode(::grpc::ClientContext* context, const ::message::EmailVerifyRequest& request, ::message::EmailVerifyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::EmailVerifyResponse>> AsyncgetEmailVerifyCode(::grpc::ClientContext* context, const ::message::EmailVerifyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::EmailVerifyResponse>>(AsyncgetEmailVerifyCodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::EmailVerifyResponse>> PrepareAsyncgetEmailVerifyCode(::grpc::ClientContext* context, const ::message::EmailVerifyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::EmailVerifyResponse>>(PrepareAsyncgetEmailVerifyCodeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void getEmailVerifyCode(::grpc::ClientContext* context, const ::message::EmailVerifyRequest* request, ::message::EmailVerifyResponse* response, std::function<void(::grpc::Status)>) override;
      void getEmailVerifyCode(::grpc::ClientContext* context, const ::message::EmailVerifyRequest* request, ::message::EmailVerifyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::message::EmailVerifyResponse>* AsyncgetEmailVerifyCodeRaw(::grpc::ClientContext* context, const ::message::EmailVerifyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::EmailVerifyResponse>* PrepareAsyncgetEmailVerifyCodeRaw(::grpc::ClientContext* context, const ::message::EmailVerifyRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_getEmailVerifyCode_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status getEmailVerifyCode(::grpc::ServerContext* context, const ::message::EmailVerifyRequest* request, ::message::EmailVerifyResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_getEmailVerifyCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getEmailVerifyCode() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_getEmailVerifyCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getEmailVerifyCode(::grpc::ServerContext* /*context*/, const ::message::EmailVerifyRequest* /*request*/, ::message::EmailVerifyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetEmailVerifyCode(::grpc::ServerContext* context, ::message::EmailVerifyRequest* request, ::grpc::ServerAsyncResponseWriter< ::message::EmailVerifyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_getEmailVerifyCode<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_getEmailVerifyCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getEmailVerifyCode() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::message::EmailVerifyRequest, ::message::EmailVerifyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::message::EmailVerifyRequest* request, ::message::EmailVerifyResponse* response) { return this->getEmailVerifyCode(context, request, response); }));}
    void SetMessageAllocatorFor_getEmailVerifyCode(
        ::grpc::MessageAllocator< ::message::EmailVerifyRequest, ::message::EmailVerifyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::message::EmailVerifyRequest, ::message::EmailVerifyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getEmailVerifyCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getEmailVerifyCode(::grpc::ServerContext* /*context*/, const ::message::EmailVerifyRequest* /*request*/, ::message::EmailVerifyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getEmailVerifyCode(
      ::grpc::CallbackServerContext* /*context*/, const ::message::EmailVerifyRequest* /*request*/, ::message::EmailVerifyResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_getEmailVerifyCode<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_getEmailVerifyCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getEmailVerifyCode() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_getEmailVerifyCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getEmailVerifyCode(::grpc::ServerContext* /*context*/, const ::message::EmailVerifyRequest* /*request*/, ::message::EmailVerifyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_getEmailVerifyCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getEmailVerifyCode() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_getEmailVerifyCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getEmailVerifyCode(::grpc::ServerContext* /*context*/, const ::message::EmailVerifyRequest* /*request*/, ::message::EmailVerifyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetEmailVerifyCode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getEmailVerifyCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getEmailVerifyCode() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getEmailVerifyCode(context, request, response); }));
    }
    ~WithRawCallbackMethod_getEmailVerifyCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getEmailVerifyCode(::grpc::ServerContext* /*context*/, const ::message::EmailVerifyRequest* /*request*/, ::message::EmailVerifyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getEmailVerifyCode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getEmailVerifyCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getEmailVerifyCode() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::message::EmailVerifyRequest, ::message::EmailVerifyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::message::EmailVerifyRequest, ::message::EmailVerifyResponse>* streamer) {
                       return this->StreamedgetEmailVerifyCode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getEmailVerifyCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getEmailVerifyCode(::grpc::ServerContext* /*context*/, const ::message::EmailVerifyRequest* /*request*/, ::message::EmailVerifyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetEmailVerifyCode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::message::EmailVerifyRequest,::message::EmailVerifyResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_getEmailVerifyCode<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_getEmailVerifyCode<Service > StreamedService;
};

class StatusService final {
 public:
  static constexpr char const* service_full_name() {
    return "message.StatusService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 客户端 获取 ChatServer 的信息
    virtual ::grpc::Status getChatServerInfo(::grpc::ClientContext* context, const ::message::ChatServerRequest& request, ::message::ChatServerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::ChatServerResponse>> AsyncgetChatServerInfo(::grpc::ClientContext* context, const ::message::ChatServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::ChatServerResponse>>(AsyncgetChatServerInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::ChatServerResponse>> PrepareAsyncgetChatServerInfo(::grpc::ClientContext* context, const ::message::ChatServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::ChatServerResponse>>(PrepareAsyncgetChatServerInfoRaw(context, request, cq));
    }
    // ChatServer 验证 客户端的 登录token
    virtual ::grpc::Status verifyToken(::grpc::ClientContext* context, const ::message::LoginRequest& request, ::message::LoginResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::LoginResponse>> AsyncverifyToken(::grpc::ClientContext* context, const ::message::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::LoginResponse>>(AsyncverifyTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::LoginResponse>> PrepareAsyncverifyToken(::grpc::ClientContext* context, const ::message::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::LoginResponse>>(PrepareAsyncverifyTokenRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // 客户端 获取 ChatServer 的信息
      virtual void getChatServerInfo(::grpc::ClientContext* context, const ::message::ChatServerRequest* request, ::message::ChatServerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getChatServerInfo(::grpc::ClientContext* context, const ::message::ChatServerRequest* request, ::message::ChatServerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ChatServer 验证 客户端的 登录token
      virtual void verifyToken(::grpc::ClientContext* context, const ::message::LoginRequest* request, ::message::LoginResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void verifyToken(::grpc::ClientContext* context, const ::message::LoginRequest* request, ::message::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::ChatServerResponse>* AsyncgetChatServerInfoRaw(::grpc::ClientContext* context, const ::message::ChatServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::ChatServerResponse>* PrepareAsyncgetChatServerInfoRaw(::grpc::ClientContext* context, const ::message::ChatServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::LoginResponse>* AsyncverifyTokenRaw(::grpc::ClientContext* context, const ::message::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::LoginResponse>* PrepareAsyncverifyTokenRaw(::grpc::ClientContext* context, const ::message::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status getChatServerInfo(::grpc::ClientContext* context, const ::message::ChatServerRequest& request, ::message::ChatServerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::ChatServerResponse>> AsyncgetChatServerInfo(::grpc::ClientContext* context, const ::message::ChatServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::ChatServerResponse>>(AsyncgetChatServerInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::ChatServerResponse>> PrepareAsyncgetChatServerInfo(::grpc::ClientContext* context, const ::message::ChatServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::ChatServerResponse>>(PrepareAsyncgetChatServerInfoRaw(context, request, cq));
    }
    ::grpc::Status verifyToken(::grpc::ClientContext* context, const ::message::LoginRequest& request, ::message::LoginResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::LoginResponse>> AsyncverifyToken(::grpc::ClientContext* context, const ::message::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::LoginResponse>>(AsyncverifyTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::LoginResponse>> PrepareAsyncverifyToken(::grpc::ClientContext* context, const ::message::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::LoginResponse>>(PrepareAsyncverifyTokenRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void getChatServerInfo(::grpc::ClientContext* context, const ::message::ChatServerRequest* request, ::message::ChatServerResponse* response, std::function<void(::grpc::Status)>) override;
      void getChatServerInfo(::grpc::ClientContext* context, const ::message::ChatServerRequest* request, ::message::ChatServerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void verifyToken(::grpc::ClientContext* context, const ::message::LoginRequest* request, ::message::LoginResponse* response, std::function<void(::grpc::Status)>) override;
      void verifyToken(::grpc::ClientContext* context, const ::message::LoginRequest* request, ::message::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::message::ChatServerResponse>* AsyncgetChatServerInfoRaw(::grpc::ClientContext* context, const ::message::ChatServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::ChatServerResponse>* PrepareAsyncgetChatServerInfoRaw(::grpc::ClientContext* context, const ::message::ChatServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::LoginResponse>* AsyncverifyTokenRaw(::grpc::ClientContext* context, const ::message::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::LoginResponse>* PrepareAsyncverifyTokenRaw(::grpc::ClientContext* context, const ::message::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_getChatServerInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_verifyToken_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 客户端 获取 ChatServer 的信息
    virtual ::grpc::Status getChatServerInfo(::grpc::ServerContext* context, const ::message::ChatServerRequest* request, ::message::ChatServerResponse* response);
    // ChatServer 验证 客户端的 登录token
    virtual ::grpc::Status verifyToken(::grpc::ServerContext* context, const ::message::LoginRequest* request, ::message::LoginResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_getChatServerInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getChatServerInfo() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_getChatServerInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getChatServerInfo(::grpc::ServerContext* /*context*/, const ::message::ChatServerRequest* /*request*/, ::message::ChatServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetChatServerInfo(::grpc::ServerContext* context, ::message::ChatServerRequest* request, ::grpc::ServerAsyncResponseWriter< ::message::ChatServerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_verifyToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_verifyToken() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_verifyToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status verifyToken(::grpc::ServerContext* /*context*/, const ::message::LoginRequest* /*request*/, ::message::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestverifyToken(::grpc::ServerContext* context, ::message::LoginRequest* request, ::grpc::ServerAsyncResponseWriter< ::message::LoginResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_getChatServerInfo<WithAsyncMethod_verifyToken<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_getChatServerInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getChatServerInfo() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::message::ChatServerRequest, ::message::ChatServerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::message::ChatServerRequest* request, ::message::ChatServerResponse* response) { return this->getChatServerInfo(context, request, response); }));}
    void SetMessageAllocatorFor_getChatServerInfo(
        ::grpc::MessageAllocator< ::message::ChatServerRequest, ::message::ChatServerResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::message::ChatServerRequest, ::message::ChatServerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getChatServerInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getChatServerInfo(::grpc::ServerContext* /*context*/, const ::message::ChatServerRequest* /*request*/, ::message::ChatServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getChatServerInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::message::ChatServerRequest* /*request*/, ::message::ChatServerResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_verifyToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_verifyToken() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::message::LoginRequest, ::message::LoginResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::message::LoginRequest* request, ::message::LoginResponse* response) { return this->verifyToken(context, request, response); }));}
    void SetMessageAllocatorFor_verifyToken(
        ::grpc::MessageAllocator< ::message::LoginRequest, ::message::LoginResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::message::LoginRequest, ::message::LoginResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_verifyToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status verifyToken(::grpc::ServerContext* /*context*/, const ::message::LoginRequest* /*request*/, ::message::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* verifyToken(
      ::grpc::CallbackServerContext* /*context*/, const ::message::LoginRequest* /*request*/, ::message::LoginResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_getChatServerInfo<WithCallbackMethod_verifyToken<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_getChatServerInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getChatServerInfo() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_getChatServerInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getChatServerInfo(::grpc::ServerContext* /*context*/, const ::message::ChatServerRequest* /*request*/, ::message::ChatServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_verifyToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_verifyToken() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_verifyToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status verifyToken(::grpc::ServerContext* /*context*/, const ::message::LoginRequest* /*request*/, ::message::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_getChatServerInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getChatServerInfo() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_getChatServerInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getChatServerInfo(::grpc::ServerContext* /*context*/, const ::message::ChatServerRequest* /*request*/, ::message::ChatServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetChatServerInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_verifyToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_verifyToken() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_verifyToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status verifyToken(::grpc::ServerContext* /*context*/, const ::message::LoginRequest* /*request*/, ::message::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestverifyToken(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getChatServerInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getChatServerInfo() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getChatServerInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_getChatServerInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getChatServerInfo(::grpc::ServerContext* /*context*/, const ::message::ChatServerRequest* /*request*/, ::message::ChatServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getChatServerInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_verifyToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_verifyToken() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->verifyToken(context, request, response); }));
    }
    ~WithRawCallbackMethod_verifyToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status verifyToken(::grpc::ServerContext* /*context*/, const ::message::LoginRequest* /*request*/, ::message::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* verifyToken(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getChatServerInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getChatServerInfo() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::message::ChatServerRequest, ::message::ChatServerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::message::ChatServerRequest, ::message::ChatServerResponse>* streamer) {
                       return this->StreamedgetChatServerInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getChatServerInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getChatServerInfo(::grpc::ServerContext* /*context*/, const ::message::ChatServerRequest* /*request*/, ::message::ChatServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetChatServerInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::message::ChatServerRequest,::message::ChatServerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_verifyToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_verifyToken() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::message::LoginRequest, ::message::LoginResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::message::LoginRequest, ::message::LoginResponse>* streamer) {
                       return this->StreamedverifyToken(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_verifyToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status verifyToken(::grpc::ServerContext* /*context*/, const ::message::LoginRequest* /*request*/, ::message::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedverifyToken(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::message::LoginRequest,::message::LoginResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_getChatServerInfo<WithStreamedUnaryMethod_verifyToken<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_getChatServerInfo<WithStreamedUnaryMethod_verifyToken<Service > > StreamedService;
};

}  // namespace message


#endif  // GRPC_message_2eproto__INCLUDED
